= render_pretty_header 'Recent Changes' do
  %p
    This page lists what has changed recently in the database. It is for
    informative purposes only.

  .search-parameters
    - if !@search[:table_name].blank? && !@search[:record_id].blank?
      .filtering
        Filtering by #{@search[:table_name].singularize} #{@search[:record_id]}.
        = link_to('Remove filter', modifications_path(q: @search[:q]))

    %form{method: :get, action: modifications_path}<
      %input{type: 'hidden', name: 'table_name', value: @search[:table_name]}<>
      %input{type: 'hidden', name: 'record_id', value: @search[:record_id]}<>
      %input{name: 'q', value: @search[:q], placeholder: 'Search'}<>
      %button{type: 'submit'}<> Search

- if @audits.empty?
  %p There are no modifications in the database
- else
  %table.audits
    %thead
      %tr
        %th{:rowspan => 2} Record
        %th{:colspan => 3} How the data changed
      %tr
        %th Field
        %th Value before change
        %th Value after change
    %tbody
      - @audits.each do |audit|
        - rowspan = [1, audit.changed_attributes.length].max
        - rowclass = cycle('odd', 'even')
        %tr{class: rowclass, 'data-id': audit.id}
          %td.record{:rowspan => rowspan}
            .identifier
              = show_record_identifier(audit)
              - if !params[:table_name] || !params[:row_id]
                = link_to_record_history(audit)
            .user= "#{audit.action} by #{audit.user_email}"
            .created_at #{audit.created_at.to_s(:long)} UTC
          - if audit.changed_attributes.length < 1
            %td.change_field
            %td.change_before
            %td.change_after
          - else
            - first_change = true
            - audit.changed_attributes.each do |attribute, before, after|
              - if first_change
                - first_change = false
                %td.change_field= attribute
                %td.change_before
                  %div.overflow= format_column_value(attribute, before)
                %td.change_after
                  %div.overflow= format_column_value(attribute, after)
              - else
                %tr{:class => rowclass}
                  %td.change_field= attribute
                  %td.change_before
                    %div.overflow= format_column_value(attribute, before)
                  %td.change_after
                    %div.overflow= format_column_value(attribute, after)
  = will_paginate(@audits)
