-# Required variables: "delivery_method"; "rows", an Array of Hashes (see Issue.distribution_list_data)
%h3= delivery_method

- box_sizes = @issue.used_box_sizes_i(delivery_method)

%table.distribution-list
  %thead
    %tr
      %th Region
      %th Council
      %th Final Recipient
      %th Delivery Address
      %th # Copies
      - box_sizes.each do |box_size|
        %th= "x#{box_size}"

  %tbody
    - rows.chunk(&:region).each do |region, rows1|
      - new_region = true
      - reset_cycle
      - rows1.chunk(&:council).each do |council, rows2|
        - new_council = true
        - rows2.each do |row|
          %tr{class: cycle('odd', 'even')}
            %th= new_region ? region : ''
            %th= new_council ? council : ''
            %td= row.customer_name
            %td= row.delivery_address
            %td.num-copies= number_with_delimiter(row.num_copies)
            - order_box_sizes = @issue.find_box_sizes(row.num_copies)
            - box_sizes.each do |box_size|
              %td.num-copies
                - if order_box_sizes[box_size]
                  = number_with_delimiter(order_box_sizes[box_size])
            - new_region = false
            - new_council = false
      %tr.subtotal
        %td
          %td{colspan: 3} Region subtotal
          %td.num-copies= number_with_delimiter(rows1.sum(&:num_copies))
          - box_sizes.each do |box_size|
            %td.num-copies= number_with_delimiter(rows1.sum { |r| @issue.find_box_sizes(r.num_copies)[box_size] || 0 })
    %tr.total
      %td{:colspan => 4} Total
      %td.num-copies= number_with_delimiter(rows.sum(&:num_copies))
      - box_sizes.each do |box_size|
        %td.num-copies= number_with_delimiter(rows.sum { |r| @issue.find_box_sizes(r.num_copies)[box_size] || 0 })
