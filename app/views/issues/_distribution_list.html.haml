-# Required variables: "delivery_method"; "regions", a DistributionListSubData
%h3= delivery_method ? delivery_method.name : 'Unknown'
%h4= delivery_method ? delivery_method.description : 'Database inconsistencies'

%table.distribution-list
  %thead
    %tr
      %th Region
      %th District
      %th Final Recipient
      %th Distribution Instructions
      %th # Copies
      - @issue.issue_box_sizes_i.each do |ibs|
        %th= "x#{ibs}"

  %tbody
    - regions.each do |region, districts|
      - new_region = true
      - reset_cycle
      - districts.each do |district, orders|
        - new_district = true
        - orders.each do |order|
          %tr{:class => cycle('odd', 'even')}
            %th= new_region ? (order.region ? order.region.name : 'INCONSISTENT') : ''
            - new_region = false
            %th= new_district ? order.district : ''
            - new_district = false
            %td= order.customer_name
            %td= order.deliver_via
            %td.num-copies= number_with_delimiter(order.num_copies.to_i)
            - @issue.issue_box_sizes_i.each do |ibs|
              %td.num-copies
                = number_with_delimiter(order.num_boxes[ibs] > 0 ? order.num_boxes[ibs] : '')
      %tr.subtotal
        %td
        %td{:colspan => 3} Region subtotal
        %td.num-copies= number_with_delimiter districts.total(:num_copies)
        - @issue.issue_box_sizes_i.each do |ibs|
          %td.num-copies= number_with_delimiter districts.total_boxes(ibs)
    %tr.total
      %td{:colspan => 4} Total
      %td.num-copies= number_with_delimiter regions.total(:num_copies)
      - @issue.issue_box_sizes_i.each do |ibs|
        %td.num-copies= number_with_delimiter regions.total_boxes(ibs)
