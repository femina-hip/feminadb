module Sunspot
  module QueryBuilder
    grammar Syntax
      rule expression
        maybe_space disjunction? maybe_space {
          def type; :expression; end
    
          def subnodes
            elements[1].terminal? ? [] : [elements[1]]
          end
        }
      end
    
      rule disjunction
        conjunction (space or_rule space expression)? {
          def type; :disjunction; end
    
          def expressions
            elements[1].terminal? ? [] : [elements[1].expression]
          end
    
          def subnodes
            [conjunction] + expressions
          end
        }
      end
    
      rule conjunction
        factor (space !or_rule (and_rule space)? expression)? {
          def type; :conjunction; end
    
          def expressions
            elements[1].terminal? ? [] : [elements[1].expression]
          end
    
          def subnodes
            [factor] + expressions
          end
        }
      end
    
      rule factor
        not? test {
          def type; :factor; end
    
          def not?
            !elements[0].text_value.empty?
          end
    
          def subnodes
            [test]
          end
        }
      end
    
      rule test
        '(' expression ')' {
          def type; :test; end
          def needs_parentheses?; true; end
          def subnodes; [expression]; end
        }
        /
        '' filter {
          def type; :test; end
          def needs_parentheses?; false; end
          def subnodes; [filter]; end
        }
      end
    
      rule filter
        dynamic_field comparator value {
          def type; :filter; end
          def subnodes
            [dynamic_field, comparator, value]
          end
        }
        /
        field comparator value {
          def type; :filter; end
          def subnodes
            [field, comparator, value]
          end
        }
        /
        '' value {
          def type; :filter; end
          def subnodes; [value]; end
        }
      end
    
      rule field
        [a-zA-Z] [a-zA-Z0-9_]* {
          def type; :field; end
        }
      end

      rule dynamic_field
        field1:field ':' field2:field {
          def type; :dynamic_field; end
          def subnodes; [ field1, field2 ]; end
        }
      end
    
      rule comparator
        (':' / '>=' / '<=' / '=' / '<' / '>') {
          def type; :comparator; end
        }
      end
    
      rule value
        (('"' (!["] .)* '"') / ("'" (!['] .)* "'") / (![ '"()] .)+) {
          def type; :value; end
          def value
            if text_value[0] == ?' || text_value[0] == ?"
              text_value[1..-2]
            else
              text_value
            end
          end
        }
      end
    
      rule or_rule
        'OR' / 'or' / '||' / '|'
      end
    
      rule and_rule
        'AND' / 'and' / '&&' / '&'
      end
    
      rule not
        '-' / '!' / 'NOT' space
      end
    
      rule maybe_space
        ' '*
      end
    
      rule space
        ' '+
      end
    end
  end
end
