#!/usr/bin/env ruby
#
# Script to populate the database from old Excel sheets
#
# The Excel sheets had data in a special format, and if the Excel sheets no
# longer exist this script is no longer useful beyond as an educational tool.
#
# The script was run as follows:
#
# 1. Run the script to make sure there will be no errors (e.g., missing region)
# 2. Run the script again with --really
# 3. Repeat steps 1, 2 with RAILS_ENV=production

require File.dirname(__FILE__) + '/../config/boot'
require File.dirname(__FILE__) + '/../config/environment'
require 'console_app'

require 'optparse'
require 'csv'
require 'parseexcel'

User.current_user = User.find_by_login('admin') # for updated_by

options = { :file => nil }
OptionParser.new do |opt|
  opt.banner = 'Usage: parse_ss_script [options]'
  opt.on('-f', '--file=', 'Specify input file') { |v| options[:file] = v }
  opt.on('-i', '--issue=', 'Specify issue number (NOT ID)') { |v| options[:issue_number] = v.to_i }
  opt.on('-t', '--translation-file=', 'Specify file to heather-amandus-merge.csv') { |v| options[:translation_file] = v }
  opt.on('-r', '--really', 'Actually modify the DB') { |v| options[:really] = true }
  opt.parse!(ARGV)
end

class HeatherAmandusGood
  def initialize(filename)
    @hag = []

    CSV::Reader.parse(File.open(filename, 'rb')) do |row|
      next if row.size < 3 or row[0] == "In Heather's Sheet" or row[0] == "Region"
    
      heather = [row[0] || '', row[1] || '', row[2] || '']
      amandus = heather.clone
      good = heather.clone

      is_new = row[3] == 'n'
      if is_new
        # "good" values are filled in, sometimes in [4-6] and sometimes in [7-9]
        [4, 5, 6].each do |i|
          if row.size >= i and not row[i].nil?
            good[i - 4] = row[i]
          end
        end
        [7, 8, 9].each do |i|
          if row.size >= i and not row[i].nil?
            good[i - 7] = row[i]
          end
        end
      else
        [4, 5, 6].each do |i|
          if row.size >= i and not row[i].nil?
            if row[i] == '-'
              amandus[i - 4] = ''
            else
              amandus[i - 4] = row[i]
            end
          end
        end
        good = amandus.clone
        [7, 8, 9].each do |i|
          if row.size >= i and not row[i].nil?
            good[i - 7] = row[i]
          end
        end
      end
      @hag << [ heather, amandus, good ]
    end
  end

  def amandus_to_good(region, district, name)
    r = @hag.find { |h, a, g| a.collect{ |x| x.upcase } == [ region.name.upcase, district.upcase, name.upcase ] }
    if r
      g = r[2]
      raise Exception.new if region.name.upcase != g[0].upcase
      return region, g[1], g[2]
    else
      return region, district, name
    end
  end
end

def find_region(name)
  name = 'Dar es Salaam' if name == "D'Salaam"
  return Region.find_by_name(name)
end

def find_customer(region, district, name, hag=nil)
  district = 'Kilwa' if district == 'Dsm/Rufiji' and name == 'Songas'

  if hag
    region, district, name = hag.amandus_to_good(region, district, name)
  end
  c = Customer.find_by_region_id_and_district_and_name(region.id, district, name)
  if not c
    p region, district, name
    raise Exception
  end
  return c
end

def handle_row_simchezo31(row, state)
  return nil if row.at(0).nil?

  if row.at(0).to_s('ASCII') =~ /^Si Mchezo No\.31.*/
    # Top of worksheet 1
    state[:delivery_method] = DeliveryMethod.find_by_abbreviation('UC')
    return nil
  end

  if row.at(0).to_s('ASCII') =~ /CORPORATE COMPANIES.*/
    # Middle of worksheet 1
    state[:delivery_method] = DeliveryMethod.find_by_abbreviation('UCC')
    return nil
  end

  region = find_region(row.at(0).to_s('ASCII'))
  if not region
    region = state[:region]
  end
  state[:region] = region # In case no data on this row--e.g. SM31

  # No customer?
  return nil if row.at(3).to_s.empty? and row.at(2).to_s.empty?
  # No issues?
  return nil if row.at(5).to_i == 0

  district = row.at(1) ? row.at(1).to_s('ASCII').strip : ''
  if district.empty?
    district = state[:district]
  end
  customer_name = row.at(3) ? row.at(3).to_s('ASCII').strip : ''
  if customer_name.empty?
    customer_name = row.at(2).to_s('ASCII').strip
  end
  deliver_via = row.at(2) ? row.at(2).to_s('ASCII').strip : ''
  if deliver_via.empty?
    deliver_via = state[:deliver_via]
  end
  num_copies = row.at(5).to_i

  record = {
    :region => region,
    :district => district,
    :customer_name => customer_name,
    :deliver_via => deliver_via,
    :delivery_method => state[:delivery_method],
    :num_copies => num_copies
  }

  state[:region] = record[:region]
  state[:district] = record[:district]
  state[:deliver_via] = record[:deliver_via]
  return record
end

def handle_worksheet(worksheet, state, hag, &block_expr)
  worksheet.each do |row|
    next if not row # Starts off with a nonexistent row somehow...
    record = handle_row_simchezo31(row, state)
    if record
      customer = find_customer(record[:region], record[:district], record[:customer_name], hag)
      yield record, customer
    end
  end
end

def create_request(issue, customer, status, record, really)
  r = Request.new(
      :customer_id => customer.id,
      :issue_id => issue.id,
      :num_copies => record[:num_copies],
      :comments => 'Import from Excel',
      :request_date => issue.issue_date,
      :request_status_id => status.id,
      :region_id => customer.region_id,
      :district => record[:district],
      :customer_name => record[:customer_name],
      :deliver_via => record[:deliver_via],
      :delivery_method_id => record[:delivery_method].id
      )
  puts "#{customer.name}: #{record[:num_copies]}"

  if not r.valid?
    puts '********** Last record FAILED! *************************************'
  else
    if really
      r.save!
    end
  end
end

if not options[:file] or not options[:issue_number] or not options[:translation_file]
  puts 'Please specify a file, issue # (NOT issue ID), and translations file'
  exit 1
end

issue = Issue.find_by_issue_number(options[:issue_number])
request_status = RequestStatus.find_by_name('Delivered (unconfirmed)')

hag = HeatherAmandusGood.new(options[:translation_file])
workbook = Spreadsheet::ParseExcel.parse(options[:file])

state = {
    :region => nil,
    :district => '',
    :deliver_via => '',
    :delivery_method => nil
    }
handle_worksheet(workbook.worksheet(0), state, hag) do |record, customer|
  create_request(issue, customer, request_status, record, options[:really])
end

state[:delivery_method] = DeliveryMethod.find_by_abbreviation('DSM')
state[:region] = nil
state[:district] = ''
state[:deliver_via] = ''
handle_worksheet(workbook.worksheet(1), state, hag) do |record, customer|
  create_request(issue, customer, request_status, record, options[:really])
end

if not options[:really]
  puts 'Now run again, with --really'
end
