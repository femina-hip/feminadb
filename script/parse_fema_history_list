#!/usr/bin/env ruby
#
# Script to populate the database from old Excel sheets
#
# The Excel sheets had data in a special format, and if the Excel sheets no
# longer exist this script is no longer useful beyond as an educational tool.
#
# The script was run as follows:
#
# 1. Run the script to make sure there will be no errors (e.g., missing region)
# 2. Run the script again with --really
# 3. Repeat steps 1, 2 with RAILS_ENV=production

require File.dirname(__FILE__) + '/../config/boot'
require File.dirname(__FILE__) + '/../config/environment'
require 'console_app'

require 'optparse'
require 'csv'
require 'parseexcel'

User.current_user = User.find_by_login('admin') # for updated_by

$options = { :file => nil }
OptionParser.new do |opt|
  opt.banner = 'Usage: parse_ss_script [options]'
  opt.on('-f', '--file=', 'Specify input file') { |v| $options[:file] = v }
  opt.on('-i', '--issue=', 'Specify issue number (NOT ID)') { |v| $options[:issue_number] = v.to_i }
  opt.on('-t', '--translation-file=', 'Specify file to fema-to-id.csv') { |v| $options[:translation_file] = v }
  opt.on('-r', '--really', 'Actually modify the DB') { |v| $options[:really] = true }
  opt.parse!(ARGV)
end

class FemaToId
  include Singleton

  def initialize
    filename = $options[:translation_file]
    @data = {}
    CSV::Reader.parse(File.open(filename, 'rb')) do |row|
      @data[[row[0], row[1]]] = row[2].to_i
    end
  end

  def find_customer_id(region_name, name)
    return @data[[region_name, name]]
  end
end

def find_region(name)
  name = 'Dar es Salaam' if name == "D'Salaam"
  name = 'Pwani' if name == 'Coast'
  return Region.find_by_name(name)
end

def handle_row_fema6_uc(row, state)
  return nil if row.at(0).nil?

  state[:delivery_method] = DeliveryMethod.find_by_abbreviation('UC')

  region = find_region(row.at(0).to_s('ASCII').strip.capitalize)
  if not region
    region = state[:region]
  end
  state[:region] = region # In case no data on this row--e.g. SM31

  # No customer?
  return nil if row.at(4).to_s.empty?
  # No issues?
  return nil if row.at(6).to_i == 0

  district = row.at(1) ? row.at(1).to_s('ASCII').strip : ''
  if district =~ /(.*)\s*\d*/
    district = $1
  end
  if district.empty?
    district = state[:district]
  end
  state[:district] = district

  customer_name = row.at(4).to_s('ASCII').strip
  if customer_name =~ /\(\d+\)\s*(.*)/
    customer_name = $1
  end
  deliver_via = row.at(2) ? row.at(2).to_s('ASCII').strip : ''
  if deliver_via.empty?
    deliver_via = state[:deliver_via]
  end
  num_copies = row.at(6).to_i

  c = Customer.find_by_region_id_and_district_and_name(state[:region].id, district, customer_name)
  if not c
    c_id = FemaToId.instance.find_customer_id(state[:region].name, customer_name)
    if not c_id
      puts "*Cannot find: #{region.name}, #{district}: ***#{customer_name}***"
      return nil
    end
    c = Customer.find(c_id)
  end

  record = {
    :customer => c,
    #:deliver_via => deliver_via,
    :delivery_method => state[:delivery_method],
    :num_copies => num_copies
  }

  #state[:deliver_via] = record[:deliver_via]
  return record
end

def handle_row_fema6_dsm(row, state)
  return nil if row.at(3).nil? or row.at(3).to_i == 0 or row.at(2).nil? or row.at(2).to_s('ASCII').strip.empty?

  name = row.at(2).to_s('ASCII').strip
  num_copies = row.at(3).to_i
  address = row.at(4).nil? ? '' : row.at(4).to_s('ASCII').strip

  if name =~ /(.*) \(\d+\)/
    name = $1
  end

  region = Region.find_by_name('Dar es Salaam')

  c = nil
  if c_id = FemaToId.instance.find_customer_id(name)
    c = Customer.find(c_id)
  else
    c = Customer.find_by_region_id_and_name(region.id, name)
  end

  if not c
    #raise Exception.new("Customer #{name} not found")
    puts "*****Cannot find customer #{name}*****"
    return nil
  end

  record = {
    :customer => c,
    :deliver_via => '',
    :delivery_method => state[:delivery_method],
    :address => address,
    :num_copies => num_copies
  }

  return record
end

def handle_worksheet(worksheet, state, &block_expr)
  state[:delivery_method] = DeliveryMethod.find_by_abbreviation('UC')
  worksheet.each do |row|
    next if not row # Starts off with a nonexistent row somehow...
    record = handle_row_fema6_uc(row, state)
    if record
      customer = record[:customer]
      yield record, customer
    end
  end
end

def create_request(issue, customer, status, record, really)
#  r = Request.new(
#      :customer_id => customer.id,
#      :issue_id => issue.id,
#      :num_copies => record[:num_copies],
#      :comments => 'Import from Excel',
#      :request_date => issue.issue_date,
#      :request_status_id => status.id,
#      :region_id => customer.region_id,
#      :district => record[:district],
#      :customer_name => record[:customer_name],
#      :deliver_via => record[:deliver_via],
#      :delivery_method_id => record[:delivery_method].id
#      )
  puts "#{customer.name}: #{record[:num_copies]}"
  r = Subscription.new(
        :customer_id => customer.id,
        :publication_id => issue.publication_id,
        :num_copies => record[:num_copies],
        :comments => 'Import from Excel'
        )

  if not r.valid?
    puts '********** Last record FAILED! *************************************'
  else
    if really
      r.save!
    end
  end
end

if not $options[:file] or not $options[:issue_number] or not $options[:translation_file]
  puts 'Please specify a file, issue # (NOT issue ID), and translations file'
  exit 1
end

issue = Publication.find_by_name('Fema').issues.find_by_issue_number($options[:issue_number])
request_status = RequestStatus.find_by_name('Delivered (unconfirmed)')

workbook = Spreadsheet::ParseExcel.parse($options[:file])

state = {
    :region => nil,
    :district => '',
    :deliver_via => '',
    :delivery_method => DeliveryMethod.find_by_abbreviation('DSM')
    }
handle_worksheet(workbook.worksheet(4), state) do |record, customer|
  create_request(issue, customer, request_status, record, $options[:really])
end

if not $options[:really]
  puts 'Now run again, with --really'
end
