#!/usr/bin/env ruby

require File.dirname(__FILE__) + '/../config/boot'
require File.dirname(__FILE__) + '/../config/environment'
require 'console_app'

require 'optparse'
require 'csv'

User.current_user = User.find_by_login('admin') # for updated_by

options = { :file => nil }
OptionParser.new do |opt|
  opt.banner = 'Usage: parse_ss_script [options]'
  opt.on('-f', '--file=', 'Specify input file') { |v| options[:file] = v }
  opt.on('-t', '--translations-file=', 'Specify translations file') { |v| options[:translations_file] = v }
  opt.on('-r', '--really', 'Actually modify the DB') { |v| options[:really] = true }
  opt.parse!(ARGV)
end

if not options[:file]
  puts 'Please specify a filename'
  exit
end

publication = Publication.find_by_name('Fema')
delivery_method_uc = DeliveryMethod.find_by_name('Up-Country')
delivery_method_dar = DeliveryMethod.find_by_name('Dar es Salaam')

if (publication.nil? \
    or delivery_method_uc.nil? \
    or delivery_method_dar.nil?)
  puts 'One or more of the following are not in the database:'
  puts ' - Publication: "Fema"'
  puts ' - DeliveryMethod: "Up-Country"'
  puts ' - DeliveryMethod: "Dar es Salaam"'
  puts 'Ensure these are in the database, and run this script again'
  exit 1
end

substitutions = {}
CSV::Reader.parse(File.open(options[:translations_file], 'rb')) do |row|
  next if row.size < 3

  heather = [row[0], row[1], row[2]]
  substitutions[heather] = {
      'amandus' => Array.new(heather),
      'good' => Array.new(heather),
      'is_new' => false,
      'comment' => nil
  }

  is_new = row[3] == 'n'
  if is_new
    # "good" values are filled in, sometimes in [4-6] and sometimes in [7-9]
    [4, 5, 6].each do |i|
      if row.size >= i and not row[i].nil?
        substitutions[heather]['good'][i - 4] = row[i]
      end
    end
    [7, 8, 9].each do |i|
      if row.size >= i and not row[i].nil?
        substitutions[heather]['good'][i - 7] = row[i]
      end
    end
    substitutions[heather]['is_new'] = true
  else
    [4, 5, 6].each do |i|
      if row.size >= i and not row[i].nil?
        if row[i] == '-'
          substitutions[heather]['amandus'][i - 4] = nil
        else
          substitutions[heather]['amandus'][i - 4] = row[i]
        end
      end
    end
    substitutions[heather]['good'] = Array.new(substitutions[heather]['amandus'])
    [7, 8, 9].each do |i|
      if row.size >= i and not row[i].nil?
        substitutions[heather]['good'][i - 7] = row[i]
      end
    end
  end
  if row.size >= 10 and not row[10].nil?
    substitutions[heather]['comment'] = row[10]
  end
end

region_name = ''
customer_type_name = ''
district = ''

CSV::Reader.parse(File.open(options[:file], 'rb')) do |row|
  next if row.length < 3 or row[2].nil? or row[2].strip.empty?

  name = row[2].strip

  if row[3] and row[3].strip.length > 0
    region_name = row[3].strip.capitalize
    next if region_name == 'Region'
    region_name = 'Zanzibar' if region_name == 'Zanzibar island'
    region_name = 'Dar es Salaam' if region_name == 'Dsm'
    region_name = 'Kilimanjaro' if region_name == "K'njaro"
  end

  if row[1] and row[1].strip.length > 0
    customer_type_name = row[1].strip
    customer_type_name = 'DO' if customer_type_name == 'EM'
    customer_type_name = 'CBO' if customer_type_name == 'FBO'
    customer_type_name = 'GM' if customer_type_name == 'GD'
  end
  customer_type = CustomerType[customer_type_name]
  if customer_type.nil?
    puts "There is no Customer Type, '#{customer_type_name}'!"
    if options[:really]
      puts 'Even worse, you specified --force! Now the database is screwy.'
    end
    puts 'Fatal error; exiting'
    exit 1
  end

  if row[4] and row[4].strip.length > 0
    district = row[4].strip.capitalize
  end

  amandus = heather = good = [ region_name, district, name ]
  comment = ''
  is_new = false

  if substitutions.has_key? heather
    amandus = substitutions[heather]['amandus']
    good = substitutions[heather]['good']
    comment = substitutions[heather]['comment']
    is_new = substitutions[heather]['is_new']
  end

  amandus_region = Region.find_by_name(amandus[0])
  good_region = Region.find_by_name(good[0])
  if amandus_region.nil? or good_region.nil?
    puts "There is no Region, '#{region_name}' or '#{good[0]}'!"
    if options[:really]
      puts 'Even worse, you specified --force! Now the database is screwy.'
      puts "Undo the mess you made, add Region '#{region_name}', and try again."
    end
    puts 'Fatal error; exiting'
    exit 1
  end

  if not is_new
    customer = Customer.find_by_region_id_and_district_and_name(
        amandus_region, amandus[1], amandus[2])
    if not customer
      puts "NOT FOUND: #{amandus.join(', ')}"
      next
    end
    customer.name = good[2]
    customer.district = good[1]
    customer.region = good_region
  else
    # In case we already ran the script
    customer = Customer.find_by_region_id_and_district_and_name(
        good_region, good[1], good[2])
    if not customer
      customer = Customer.new(
          :name => good[2],
          :customer_type_id => customer_type.id,
          :district => good[1],
          :region_id => good_region.id,
          :delivery_method_id => (good_region.name == 'Dar es Salaam' ? delivery_method_dar.id : delivery_method_uc.id)
          )
    end
  end

  if row[17] and not row[17].strip.empty?
    pair = row[17].split(",", 2)
    customer.contact_name = pair[0].strip
    if pair.length >= 2
      customer.contact_position = pair[1].strip
    end
  end
  if row[18] and not row[18].strip.empty?
    customer.telephone_1 = row[18].strip
  end
  if row[19] and not row[19].strip.empty?
    customer.fax = row[19].strip
  end
  if row[20] and not row[20].strip.empty?
    customer.email_1 = row[20].strip
  end
  if row[21] and not row[21].strip.empty?
    customer.website = row[21].strip
  end
  if row[22] and not row[22].strip.empty?
    customer.po_box = row[22].strip
  end
  if row[23] and not row[23].strip.empty?
    customer.address = row[23].strip
  end

  customer.valid? or raise RecordInvalid.new(customer)
  puts "#{customer.region.name}, #{customer.district}, #{customer.name}"

  if options[:really]
    customer.save!

    if not comment.nil? and not comment.empty?
      customer.notes.create(:note => "Heather's note during survey: #{comment}")
    end
  end
end

if not options[:really]
  puts 'Now run again, with --really'
end
